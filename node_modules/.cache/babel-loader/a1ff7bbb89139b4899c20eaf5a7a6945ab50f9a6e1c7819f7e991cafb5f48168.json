{"ast":null,"code":"/**\n * Get standardized input styles based on error state\n * @param {boolean} hasError - Whether the input has an error\n * @param {string} additionalClasses - Additional CSS classes to add\n * @returns {string} - CSS classes for the input\n */\nexport const getInputStyles = (hasError, additionalClasses = '') => {\n  const baseStyles = \"w-full p-3 border rounded focus:outline-none\";\n  const errorStyles = hasError ? \"border-red-500 focus:ring-2 focus:ring-red-200\" : \"border-gray-300 focus:ring-2 focus:ring-blue-200\";\n  return `${baseStyles} ${errorStyles} ${additionalClasses}`.trim();\n};\n\n/**\n * Get standardized container styles based on error state\n * @param {boolean} hasError - Whether the container has an error\n * @param {string} additionalClasses - Additional CSS classes to add\n * @returns {string} - CSS classes for the container\n */\nexport const getContainerStyles = (hasError, additionalClasses = '') => {\n  const baseStyles = \"border rounded\";\n  const errorStyles = hasError ? \"border-red-500\" : \"border-gray-300\";\n  return `${baseStyles} ${errorStyles} ${additionalClasses}`.trim();\n};","map":{"version":3,"names":["getInputStyles","hasError","additionalClasses","baseStyles","errorStyles","trim","getContainerStyles"],"sources":["/Users/pascalseeber/Desktop/survey-process-intelligence-main/src/utils/inputStyles.js"],"sourcesContent":["/**\n * Get standardized input styles based on error state\n * @param {boolean} hasError - Whether the input has an error\n * @param {string} additionalClasses - Additional CSS classes to add\n * @returns {string} - CSS classes for the input\n */\nexport const getInputStyles = (hasError, additionalClasses = '') => {\n  const baseStyles = \"w-full p-3 border rounded focus:outline-none\";\n  const errorStyles = hasError \n    ? \"border-red-500 focus:ring-2 focus:ring-red-200\" \n    : \"border-gray-300 focus:ring-2 focus:ring-blue-200\";\n  \n  return `${baseStyles} ${errorStyles} ${additionalClasses}`.trim();\n};\n\n/**\n * Get standardized container styles based on error state\n * @param {boolean} hasError - Whether the container has an error\n * @param {string} additionalClasses - Additional CSS classes to add\n * @returns {string} - CSS classes for the container\n */\nexport const getContainerStyles = (hasError, additionalClasses = '') => {\n  const baseStyles = \"border rounded\";\n  const errorStyles = hasError ? \"border-red-500\" : \"border-gray-300\";\n  \n  return `${baseStyles} ${errorStyles} ${additionalClasses}`.trim();\n}; "],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMA,cAAc,GAAGA,CAACC,QAAQ,EAAEC,iBAAiB,GAAG,EAAE,KAAK;EAClE,MAAMC,UAAU,GAAG,8CAA8C;EACjE,MAAMC,WAAW,GAAGH,QAAQ,GACxB,gDAAgD,GAChD,kDAAkD;EAEtD,OAAO,GAAGE,UAAU,IAAIC,WAAW,IAAIF,iBAAiB,EAAE,CAACG,IAAI,CAAC,CAAC;AACnE,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,kBAAkB,GAAGA,CAACL,QAAQ,EAAEC,iBAAiB,GAAG,EAAE,KAAK;EACtE,MAAMC,UAAU,GAAG,gBAAgB;EACnC,MAAMC,WAAW,GAAGH,QAAQ,GAAG,gBAAgB,GAAG,iBAAiB;EAEnE,OAAO,GAAGE,UAAU,IAAIC,WAAW,IAAIF,iBAAiB,EAAE,CAACG,IAAI,CAAC,CAAC;AACnE,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}