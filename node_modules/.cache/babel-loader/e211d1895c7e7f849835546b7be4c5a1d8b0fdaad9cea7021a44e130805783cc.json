{"ast":null,"code":"import { surveyData_de } from './surveyData_de';\nimport { surveyData_en } from './surveyData_en';\nimport { surveyData_es } from './surveyData_es';\nimport { surveyData_fr } from './surveyData_fr';\nimport { surveyData_it } from './surveyData_it';\nimport { surveyData_pt } from './surveyData_pt';\n\n// Helper function to check if survey data is not empty\nconst isValidSurveyData = data => {\n  return data && Object.keys(data).length > 0 && data.sections && Array.isArray(data.sections) && data.sections.length > 0;\n};\n\n// Build surveyData object with only non-empty data files\nconst buildSurveyData = () => {\n  const data = {};\n  if (isValidSurveyData(surveyData_de)) data.de = surveyData_de;\n  if (isValidSurveyData(surveyData_en)) data.en = surveyData_en;\n  if (isValidSurveyData(surveyData_es)) data.es = surveyData_es;\n  if (isValidSurveyData(surveyData_fr)) data.fr = surveyData_fr;\n  if (isValidSurveyData(surveyData_it)) data.it = surveyData_it;\n  if (isValidSurveyData(surveyData_pt)) data.pt = surveyData_pt;\n  return data;\n};\n\n// Export localized survey data\nexport const surveyData = buildSurveyData();\n\n// Default language\nexport const defaultLanguage = 'en';\n\n// Function to get survey data based on language\nexport const getSurveyData = (language = defaultLanguage) => {\n  return surveyData[language] || surveyData[defaultLanguage];\n};\n\n// Function to get survey sections based on language\nexport const getSurveySections = (language = defaultLanguage) => {\n  const data = surveyData[language] || surveyData[defaultLanguage];\n  return data.sections || [];\n};\n\n// Function to get start screen data based on language\nexport const getStartScreenData = (language = defaultLanguage) => {\n  const data = surveyData[language] || surveyData[defaultLanguage];\n  return data.startScreen || {};\n};\n\n// Function to get result screen data based on language\nexport const getResultScreenData = (language = defaultLanguage) => {\n  const data = surveyData[language] || surveyData[defaultLanguage];\n  return data.resultScreen || {};\n};","map":{"version":3,"names":["surveyData_de","surveyData_en","surveyData_es","surveyData_fr","surveyData_it","surveyData_pt","isValidSurveyData","data","Object","keys","length","sections","Array","isArray","buildSurveyData","de","en","es","fr","it","pt","surveyData","defaultLanguage","getSurveyData","language","getSurveySections","getStartScreenData","startScreen","getResultScreenData","resultScreen"],"sources":["/Users/pascalseeber/Desktop/survey-process-intelligence-main/src/data/surveyData.js"],"sourcesContent":["import { surveyData_de } from './surveyData_de';\nimport { surveyData_en } from './surveyData_en';\nimport { surveyData_es } from './surveyData_es';\nimport { surveyData_fr } from './surveyData_fr';\nimport { surveyData_it } from './surveyData_it';\nimport { surveyData_pt } from './surveyData_pt';\n\n// Helper function to check if survey data is not empty\nconst isValidSurveyData = (data) => {\n  return data && \n         Object.keys(data).length > 0 && \n         data.sections && \n         Array.isArray(data.sections) && \n         data.sections.length > 0;\n};\n\n// Build surveyData object with only non-empty data files\nconst buildSurveyData = () => {\n  const data = {};\n  \n  if (isValidSurveyData(surveyData_de)) data.de = surveyData_de;\n  if (isValidSurveyData(surveyData_en)) data.en = surveyData_en;\n  if (isValidSurveyData(surveyData_es)) data.es = surveyData_es;\n  if (isValidSurveyData(surveyData_fr)) data.fr = surveyData_fr;\n  if (isValidSurveyData(surveyData_it)) data.it = surveyData_it;\n  if (isValidSurveyData(surveyData_pt)) data.pt = surveyData_pt;\n  \n  return data;\n};\n\n// Export localized survey data\nexport const surveyData = buildSurveyData();\n\n// Default language\nexport const defaultLanguage = 'en';\n\n// Function to get survey data based on language\nexport const getSurveyData = (language = defaultLanguage) => {\n  return surveyData[language] || surveyData[defaultLanguage];\n};\n\n// Function to get survey sections based on language\nexport const getSurveySections = (language = defaultLanguage) => {\n  const data = surveyData[language] || surveyData[defaultLanguage];\n  return data.sections || [];\n};\n\n// Function to get start screen data based on language\nexport const getStartScreenData = (language = defaultLanguage) => {\n  const data = surveyData[language] || surveyData[defaultLanguage];\n  return data.startScreen || {};\n};\n\n// Function to get result screen data based on language\nexport const getResultScreenData = (language = defaultLanguage) => {\n  const data = surveyData[language] || surveyData[defaultLanguage];\n  return data.resultScreen || {};\n};"],"mappings":"AAAA,SAASA,aAAa,QAAQ,iBAAiB;AAC/C,SAASC,aAAa,QAAQ,iBAAiB;AAC/C,SAASC,aAAa,QAAQ,iBAAiB;AAC/C,SAASC,aAAa,QAAQ,iBAAiB;AAC/C,SAASC,aAAa,QAAQ,iBAAiB;AAC/C,SAASC,aAAa,QAAQ,iBAAiB;;AAE/C;AACA,MAAMC,iBAAiB,GAAIC,IAAI,IAAK;EAClC,OAAOA,IAAI,IACJC,MAAM,CAACC,IAAI,CAACF,IAAI,CAAC,CAACG,MAAM,GAAG,CAAC,IAC5BH,IAAI,CAACI,QAAQ,IACbC,KAAK,CAACC,OAAO,CAACN,IAAI,CAACI,QAAQ,CAAC,IAC5BJ,IAAI,CAACI,QAAQ,CAACD,MAAM,GAAG,CAAC;AACjC,CAAC;;AAED;AACA,MAAMI,eAAe,GAAGA,CAAA,KAAM;EAC5B,MAAMP,IAAI,GAAG,CAAC,CAAC;EAEf,IAAID,iBAAiB,CAACN,aAAa,CAAC,EAAEO,IAAI,CAACQ,EAAE,GAAGf,aAAa;EAC7D,IAAIM,iBAAiB,CAACL,aAAa,CAAC,EAAEM,IAAI,CAACS,EAAE,GAAGf,aAAa;EAC7D,IAAIK,iBAAiB,CAACJ,aAAa,CAAC,EAAEK,IAAI,CAACU,EAAE,GAAGf,aAAa;EAC7D,IAAII,iBAAiB,CAACH,aAAa,CAAC,EAAEI,IAAI,CAACW,EAAE,GAAGf,aAAa;EAC7D,IAAIG,iBAAiB,CAACF,aAAa,CAAC,EAAEG,IAAI,CAACY,EAAE,GAAGf,aAAa;EAC7D,IAAIE,iBAAiB,CAACD,aAAa,CAAC,EAAEE,IAAI,CAACa,EAAE,GAAGf,aAAa;EAE7D,OAAOE,IAAI;AACb,CAAC;;AAED;AACA,OAAO,MAAMc,UAAU,GAAGP,eAAe,CAAC,CAAC;;AAE3C;AACA,OAAO,MAAMQ,eAAe,GAAG,IAAI;;AAEnC;AACA,OAAO,MAAMC,aAAa,GAAGA,CAACC,QAAQ,GAAGF,eAAe,KAAK;EAC3D,OAAOD,UAAU,CAACG,QAAQ,CAAC,IAAIH,UAAU,CAACC,eAAe,CAAC;AAC5D,CAAC;;AAED;AACA,OAAO,MAAMG,iBAAiB,GAAGA,CAACD,QAAQ,GAAGF,eAAe,KAAK;EAC/D,MAAMf,IAAI,GAAGc,UAAU,CAACG,QAAQ,CAAC,IAAIH,UAAU,CAACC,eAAe,CAAC;EAChE,OAAOf,IAAI,CAACI,QAAQ,IAAI,EAAE;AAC5B,CAAC;;AAED;AACA,OAAO,MAAMe,kBAAkB,GAAGA,CAACF,QAAQ,GAAGF,eAAe,KAAK;EAChE,MAAMf,IAAI,GAAGc,UAAU,CAACG,QAAQ,CAAC,IAAIH,UAAU,CAACC,eAAe,CAAC;EAChE,OAAOf,IAAI,CAACoB,WAAW,IAAI,CAAC,CAAC;AAC/B,CAAC;;AAED;AACA,OAAO,MAAMC,mBAAmB,GAAGA,CAACJ,QAAQ,GAAGF,eAAe,KAAK;EACjE,MAAMf,IAAI,GAAGc,UAAU,CAACG,QAAQ,CAAC,IAAIH,UAAU,CAACC,eAAe,CAAC;EAChE,OAAOf,IAAI,CAACsB,YAAY,IAAI,CAAC,CAAC;AAChC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}