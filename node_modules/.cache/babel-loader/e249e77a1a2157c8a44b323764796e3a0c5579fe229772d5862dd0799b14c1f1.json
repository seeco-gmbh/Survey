{"ast":null,"code":"var _jsxFileName = \"/Users/pascalseeber/Desktop/survey-process-intelligence-main/src/components/questions/EmailQuestion.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport BaseQuestion from './BaseQuestion';\nimport { validators } from './BaseQuestion';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EmailQuestion = ({\n  question,\n  isError,\n  value = '',\n  onChange,\n  language\n}) => {\n  _s();\n  const [customValidationMessage, setCustomValidationMessage] = useState('');\n\n  // Add email validation by default for email questions\n  const questionWithValidation = {\n    ...question,\n    validation: {\n      ...(question.validation || {}),\n      email: true\n    }\n  };\n  const handleChange = e => {\n    const newValue = e.target.value;\n\n    // Only perform detailed validation if there's a value\n    if (newValue) {\n      // Check specific email validation criteria to provide better error messages\n      const basicEmailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n      if (!basicEmailRegex.test(newValue)) {\n        setCustomValidationMessage('Please include an @ sign and domain (example@domain.com)');\n      } else {\n        const localPart = newValue.split('@')[0];\n        const domainPart = newValue.split('@')[1];\n        if (localPart.length > 64) {\n          setCustomValidationMessage('The part before @ is too long (max 64 characters)');\n        } else if (/^[.]|[.]$/.test(localPart)) {\n          setCustomValidationMessage('Email cannot start or end with a dot before @');\n        } else if (/[.]{2,}/.test(localPart)) {\n          setCustomValidationMessage('Email cannot have consecutive dots');\n        } else if (domainPart.length > 255) {\n          setCustomValidationMessage('Domain name is too long');\n        } else if (!/^[a-zA-Z0-9.-]+$/.test(domainPart)) {\n          setCustomValidationMessage('Domain contains invalid characters');\n        } else if (/^[-.]|[-.]$/.test(domainPart)) {\n          setCustomValidationMessage('Domain cannot start or end with hyphen or dot');\n        } else {\n          const tld = domainPart.split('.').pop();\n          if (!tld || tld.length < 2) {\n            setCustomValidationMessage('Domain must have a valid extension (e.g., .com, .org)');\n          } else {\n            setCustomValidationMessage('');\n          }\n        }\n      }\n    } else {\n      setCustomValidationMessage('');\n    }\n    onChange(question.id, newValue);\n  };\n  const inputClass = isError ? \"w-full p-2 border border-red-500 rounded\" : \"w-full p-2 border rounded\";\n  return /*#__PURE__*/_jsxDEV(BaseQuestion, {\n    question: questionWithValidation,\n    isError: isError,\n    language: language,\n    value: value,\n    validationMessage: customValidationMessage,\n    children: /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"email\",\n      className: inputClass,\n      value: value,\n      onChange: handleChange,\n      placeholder: question.placeholder || ''\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n};\n_s(EmailQuestion, \"dfXPhJFviXeIYacYwKILD2xFT7w=\");\n_c = EmailQuestion;\nexport default EmailQuestion;\nvar _c;\n$RefreshReg$(_c, \"EmailQuestion\");","map":{"version":3,"names":["React","useState","BaseQuestion","validators","jsxDEV","_jsxDEV","EmailQuestion","question","isError","value","onChange","language","_s","customValidationMessage","setCustomValidationMessage","questionWithValidation","validation","email","handleChange","e","newValue","target","basicEmailRegex","test","localPart","split","domainPart","length","tld","pop","id","inputClass","validationMessage","children","type","className","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/pascalseeber/Desktop/survey-process-intelligence-main/src/components/questions/EmailQuestion.js"],"sourcesContent":["import React, { useState } from 'react';\nimport BaseQuestion from './BaseQuestion';\nimport { validators } from './BaseQuestion';\n\nconst EmailQuestion = ({ \n  question, \n  isError, \n  value = '', \n  onChange, \n  language \n}) => {\n  const [customValidationMessage, setCustomValidationMessage] = useState('');\n  \n  // Add email validation by default for email questions\n  const questionWithValidation = {\n    ...question,\n    validation: {\n      ...(question.validation || {}),\n      email: true\n    }\n  };\n  \n  const handleChange = (e) => {\n    const newValue = e.target.value;\n    \n    // Only perform detailed validation if there's a value\n    if (newValue) {\n      // Check specific email validation criteria to provide better error messages\n      const basicEmailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n      \n      if (!basicEmailRegex.test(newValue)) {\n        setCustomValidationMessage('Please include an @ sign and domain (example@domain.com)');\n      } else {\n        const localPart = newValue.split('@')[0];\n        const domainPart = newValue.split('@')[1];\n        \n        if (localPart.length > 64) {\n          setCustomValidationMessage('The part before @ is too long (max 64 characters)');\n        } else if (/^[.]|[.]$/.test(localPart)) {\n          setCustomValidationMessage('Email cannot start or end with a dot before @');\n        } else if (/[.]{2,}/.test(localPart)) {\n          setCustomValidationMessage('Email cannot have consecutive dots');\n        } else if (domainPart.length > 255) {\n          setCustomValidationMessage('Domain name is too long');\n        } else if (!/^[a-zA-Z0-9.-]+$/.test(domainPart)) {\n          setCustomValidationMessage('Domain contains invalid characters');\n        } else if (/^[-.]|[-.]$/.test(domainPart)) {\n          setCustomValidationMessage('Domain cannot start or end with hyphen or dot');\n        } else {\n          const tld = domainPart.split('.').pop();\n          if (!tld || tld.length < 2) {\n            setCustomValidationMessage('Domain must have a valid extension (e.g., .com, .org)');\n          } else {\n            setCustomValidationMessage('');\n          }\n        }\n      }\n    } else {\n      setCustomValidationMessage('');\n    }\n    \n    onChange(question.id, newValue);\n  };\n  \n  const inputClass = isError ? \"w-full p-2 border border-red-500 rounded\" : \"w-full p-2 border rounded\";\n  \n  return (\n    <BaseQuestion \n      question={questionWithValidation} \n      isError={isError} \n      language={language}\n      value={value}\n      validationMessage={customValidationMessage}\n    >\n      <input\n        type=\"email\"\n        className={inputClass}\n        value={value}\n        onChange={handleChange}\n        placeholder={question.placeholder || ''}\n      />\n    </BaseQuestion>\n  );\n};\n\nexport default EmailQuestion; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}