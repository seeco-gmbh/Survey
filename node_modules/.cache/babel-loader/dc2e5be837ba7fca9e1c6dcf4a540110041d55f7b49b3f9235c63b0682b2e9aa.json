{"ast":null,"code":"var _jsxFileName = \"/Users/pascalseeber/Desktop/survey-process-intelligence-main/src/components/questions/SliderQuestion.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport BaseQuestion from './BaseQuestion';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SliderQuestion = ({\n  question,\n  isError,\n  value,\n  onChange,\n  language\n}) => {\n  _s();\n  // Initialize state with the provided value or default to min value\n  const [currentValue, setCurrentValue] = useState(value !== undefined ? value : question.min || 0);\n\n  // Calculate step size based on question type\n  const calculateStepSize = () => {\n    if (question.marks) {\n      const markEntries = Object.entries(question.marks);\n      return 100 / (markEntries.length - 1);\n    }\n    return question.step || 1;\n  };\n\n  // Update local state when prop value changes\n  useEffect(() => {\n    if (value !== undefined) {\n      setCurrentValue(value);\n    }\n  }, [value]);\n  const handleSliderChange = e => {\n    const newValue = parseInt(e.target.value, 10);\n    setCurrentValue(newValue);\n    onChange(question.id, newValue);\n  };\n  const renderMarksAsColumns = () => {\n    if (!question.marks) return null;\n    const markEntries = Object.entries(question.marks);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"relative w-full pb-6 mb-6\",\n      style: {\n        position: 'relative',\n        width: '100%'\n      },\n      children: markEntries.map(([markValue, label], index) => {\n        const positionPercent = index / (markEntries.length - 1) * 100;\n        let textAlignment = \"text-center\";\n        let transformStyle = 'translateX(-50%)';\n        if (index === 0) {\n          textAlignment = \"text-left\";\n          transformStyle = 'translateX(0)';\n        } else if (index === markEntries.length - 1) {\n          textAlignment = \"text-right\";\n          transformStyle = 'translateX(-100%)';\n        }\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `absolute ${textAlignment}`,\n          style: {\n            left: `${positionPercent}%`,\n            transform: transformStyle\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"block text-xs text-gray-600 break-words\",\n            children: markValue\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"block text-xs text-gray-600 break-words\",\n            children: label\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 15\n          }, this)]\n        }, markValue, true, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this);\n  };\n\n  // Get unit from question object or default to empty string\n  const unit = question.unit || '';\n  return /*#__PURE__*/_jsxDEV(BaseQuestion, {\n    question: question,\n    isError: isError,\n    language: language,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"relative\",\n      children: [!question.marks && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex justify-between\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"text-lg font-medium\",\n          children: [currentValue, unit]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"relative\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"range\",\n          min: question.marks ? 0 : question.min,\n          max: question.marks ? 100 : question.max,\n          step: calculateStepSize(),\n          value: currentValue,\n          onChange: handleSliderChange,\n          className: `w-full h-6 ${isError ? 'accent-red-500' : 'accent-blue-600'}`,\n          style: {\n            touchAction: 'manipulation'\n          },\n          \"aria-valuemin\": question.marks ? 0 : question.min,\n          \"aria-valuemax\": question.marks ? 100 : question.max,\n          \"aria-valuenow\": currentValue\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 11\n        }, this), renderMarksAsColumns(), !question.marks && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex justify-between text-xs\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: [question.min, unit]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [question.max, unit]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n};\n_s(SliderQuestion, \"1RJBZrY7iw9ysFfZgVtgOE5TI30=\");\n_c = SliderQuestion;\nexport default SliderQuestion;\nvar _c;\n$RefreshReg$(_c, \"SliderQuestion\");","map":{"version":3,"names":["React","useEffect","useState","BaseQuestion","jsxDEV","_jsxDEV","SliderQuestion","question","isError","value","onChange","language","_s","currentValue","setCurrentValue","undefined","min","calculateStepSize","marks","markEntries","Object","entries","length","step","handleSliderChange","e","newValue","parseInt","target","id","renderMarksAsColumns","className","style","position","width","children","map","markValue","label","index","positionPercent","textAlignment","transformStyle","left","transform","fileName","_jsxFileName","lineNumber","columnNumber","unit","type","max","touchAction","_c","$RefreshReg$"],"sources":["/Users/pascalseeber/Desktop/survey-process-intelligence-main/src/components/questions/SliderQuestion.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport BaseQuestion from './BaseQuestion';\n\nconst SliderQuestion = ({ \n  question, \n  isError, \n  value, \n  onChange, \n  language \n}) => {\n  // Initialize state with the provided value or default to min value\n  const [currentValue, setCurrentValue] = useState(value !== undefined ? value : (question.min || 0));\n  \n  // Calculate step size based on question type\n  const calculateStepSize = () => {\n    if (question.marks) {\n      const markEntries = Object.entries(question.marks);\n      return 100 / (markEntries.length - 1);\n    }\n    return question.step || 1;\n  };\n  \n  // Update local state when prop value changes\n  useEffect(() => {\n    if (value !== undefined) {\n      setCurrentValue(value);\n    }\n  }, [value]);\n  \n  const handleSliderChange = (e) => {\n    const newValue = parseInt(e.target.value, 10);\n    setCurrentValue(newValue);\n    onChange(question.id, newValue);\n  };\n\n  const renderMarksAsColumns = () => {\n    if (!question.marks) return null;\n    \n    const markEntries = Object.entries(question.marks);\n\n    return (\n      <div className=\"relative w-full pb-6 mb-6\" style={{ position: 'relative', width: '100%' }}>\n        {markEntries.map(([markValue, label], index) => {\n          const positionPercent = (index / (markEntries.length - 1)) * 100;\n          let textAlignment = \"text-center\";\n          let transformStyle = 'translateX(-50%)';\n          if (index === 0) {\n            textAlignment = \"text-left\";\n            transformStyle = 'translateX(0)';\n          } else if (index === markEntries.length - 1) {\n            textAlignment = \"text-right\";\n            transformStyle = 'translateX(-100%)';\n          }\n\n          return (\n            <div\n              key={markValue}\n              className={`absolute ${textAlignment}`}\n              style={{ left: `${positionPercent}%`, transform: transformStyle }}\n            >\n              <span className=\"block text-xs text-gray-600 break-words\">{markValue}</span>\n              <span className=\"block text-xs text-gray-600 break-words\">{label}</span>\n            </div>\n          );\n        })}\n      </div>\n    );\n  };\n  \n  // Get unit from question object or default to empty string\n  const unit = question.unit || '';\n  \n  return (\n    <BaseQuestion question={question} isError={isError} language={language}>\n      <div className=\"relative\">\n        {/* Current value display - only show for range type */}\n        {!question.marks && (\n          <div className=\"flex justify-between\">\n            <span className=\"text-lg font-medium\">{currentValue}{unit}</span>\n          </div>\n        )}\n        \n        {/* Slider input */}\n        <div className=\"relative\">\n          <input\n            type=\"range\"\n            min={question.marks ? 0 : question.min}\n            max={question.marks ? 100 : question.max}\n            step={calculateStepSize()}\n            value={currentValue}\n            onChange={handleSliderChange}\n            className={`w-full h-6 ${isError ? 'accent-red-500' : 'accent-blue-600'}`}\n            style={{ touchAction: 'manipulation' }}\n            aria-valuemin={question.marks ? 0 : question.min}\n            aria-valuemax={question.marks ? 100 : question.max}\n            aria-valuenow={currentValue}\n          />\n          \n          {/* Render marks if present */}\n          {renderMarksAsColumns()}\n          \n          {/* Min/Max labels for range type */}\n          {!question.marks && (\n            <div className=\"flex justify-between text-xs\">\n              <span>{question.min}{unit}</span>\n              <span>{question.max}{unit}</span>\n            </div>\n          )}\n        </div>\n      </div>\n    </BaseQuestion>\n  );\n};\n\nexport default SliderQuestion; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}