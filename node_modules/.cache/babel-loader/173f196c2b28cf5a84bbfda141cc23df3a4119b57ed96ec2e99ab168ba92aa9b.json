{"ast":null,"code":"var _jsxFileName = \"/Users/pascalseeber/Desktop/survey-process-intelligence-main/src/components/questions/MultiselectQuestion.js\";\nimport React from 'react';\nimport BaseQuestion, { isError } from './BaseQuestion';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MultiselectQuestion = ({\n  question,\n  shouldValidate = false,\n  value = [],\n  onChange,\n  language\n}) => {\n  const {\n    hasError\n  } = isError(question, value, shouldValidate, language);\n  const handleMultiSelect = (option, checked) => {\n    if (checked) {\n      onChange(question.id, [...value, option]);\n    } else {\n      onChange(question.id, value.filter(item => item !== option));\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(BaseQuestion, {\n    question: question,\n    shouldValidate: shouldValidate,\n    language: language,\n    value: value,\n    children: [question.maxSelect && /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"text-gray-500 text-xs mb-2 block\",\n      children: [\"(max. \", question.maxSelect, \")\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `question-container ${hasError ? 'error' : ''}`,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"option-group\",\n        children: question.options.map(option => {\n          const isChecked = value.includes(option);\n          const isDisabled = question.maxSelect && value.length >= question.maxSelect && !isChecked;\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"option-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              id: `${question.id}-${option}`,\n              checked: isChecked,\n              disabled: isDisabled,\n              onChange: e => handleMultiSelect(option, e.target.checked)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 41,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: `${question.id}-${option}`,\n              className: isDisabled ? \"option-label text-gray-400\" : \"option-label\",\n              children: option\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 48,\n              columnNumber: 17\n            }, this)]\n          }, option, true, {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, this);\n};\n_c = MultiselectQuestion;\nexport default MultiselectQuestion;\nvar _c;\n$RefreshReg$(_c, \"MultiselectQuestion\");","map":{"version":3,"names":["React","BaseQuestion","isError","jsxDEV","_jsxDEV","MultiselectQuestion","question","shouldValidate","value","onChange","language","hasError","handleMultiSelect","option","checked","id","filter","item","children","maxSelect","className","fileName","_jsxFileName","lineNumber","columnNumber","options","map","isChecked","includes","isDisabled","length","type","disabled","e","target","htmlFor","_c","$RefreshReg$"],"sources":["/Users/pascalseeber/Desktop/survey-process-intelligence-main/src/components/questions/MultiselectQuestion.js"],"sourcesContent":["import React from 'react';\nimport BaseQuestion, { isError } from './BaseQuestion';\n\nconst MultiselectQuestion = ({ \n  question, \n  shouldValidate = false, \n  value = [], \n  onChange, \n  language \n}) => {\n  const { hasError } = isError(question, value, shouldValidate, language);\n  \n  const handleMultiSelect = (option, checked) => {\n    if (checked) {\n      onChange(question.id, [...value, option]);\n    } else {\n      onChange(question.id, value.filter(item => item !== option));\n    }\n  };\n\n  return (\n    <BaseQuestion \n      question={question} \n      shouldValidate={shouldValidate} \n      language={language} \n      value={value}\n    >\n      {question.maxSelect && (\n        <span className=\"text-gray-500 text-xs mb-2 block\">(max. {question.maxSelect})</span>\n      )}\n      <div className={`question-container ${hasError ? 'error' : ''}`}>\n        <div className=\"option-group\">\n          {question.options.map((option) => {\n            const isChecked = value.includes(option);\n            const isDisabled = question.maxSelect && \n                            value.length >= question.maxSelect && \n                            !isChecked;\n            \n            return (\n              <div key={option} className=\"option-item\">\n                <input\n                  type=\"checkbox\"\n                  id={`${question.id}-${option}`}\n                  checked={isChecked}\n                  disabled={isDisabled}\n                  onChange={(e) => handleMultiSelect(option, e.target.checked)}\n                />\n                <label \n                  htmlFor={`${question.id}-${option}`} \n                  className={isDisabled ? \"option-label text-gray-400\" : \"option-label\"}\n                >\n                  {option}\n                </label>\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    </BaseQuestion>\n  );\n};\n\nexport default MultiselectQuestion; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}