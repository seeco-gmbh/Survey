{"ast":null,"code":"var _jsxFileName = \"/Users/pascalseeber/Desktop/survey-process-intelligence-main/src/components/questions/SliderQuestion.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport BaseQuestion from './BaseQuestion';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SliderQuestion = ({\n  question,\n  isError,\n  value,\n  onChange,\n  language\n}) => {\n  _s();\n  const [currentValue, setCurrentValue] = useState(value !== undefined ? value : question.min);\n  useEffect(() => {\n    if (value !== undefined) {\n      setCurrentValue(value);\n    }\n  }, [value]);\n  const handleSliderChange = e => {\n    const newValue = parseInt(e.target.value, 10);\n    setCurrentValue(newValue);\n    onChange(question.id, newValue);\n  };\n  const renderMarksAsColumns = () => {\n    const markEntries = Object.entries(question.marks);\n    const range = maxMark - minMark;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"relative w-full\",\n      children: markEntries.map(([markValue, label], index) => {\n        const positionPercent = (markValue - minMark) / range * 100;\n        let textAlignment = \"text-center\";\n        if (index === 0) {\n          textAlignment = \"text-left\";\n        } else if (index === markEntries.length - 1) {\n          textAlignment = \"text-right\";\n        }\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `absolute ${textAlignment}`,\n          style: {\n            left: `${positionPercent}%`,\n            transform: 'translateX(-50%)'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"block text-xs text-gray-600 break-words\",\n            children: markValue\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"block text-xs text-gray-600 break-words\",\n            children: label\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 15\n          }, this)]\n        }, markValue, true, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this);\n  };\n  const markValues = Object.keys(question.marks).map(Number);\n  const minMark = Math.min(...markValues);\n  const maxMark = Math.max(...markValues);\n  const step = markValues.length > 1 ? markValues[1] - markValues[0] : 1;\n  return /*#__PURE__*/_jsxDEV(BaseQuestion, {\n    question: question,\n    isError: isError,\n    language: language,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pt-1 pb-4 relative\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"range\",\n        min: minMark,\n        max: maxMark,\n        step: step,\n        value: currentValue,\n        onChange: handleSliderChange,\n        className: `w-full h-6 ${isError ? 'accent-red-500' : 'accent-blue-600'}`,\n        style: {\n          touchAction: 'manipulation'\n        },\n        \"aria-valuemin\": minMark,\n        \"aria-valuemax\": maxMark,\n        \"aria-valuenow\": currentValue\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), renderMarksAsColumns()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n};\n_s(SliderQuestion, \"tVvdVRJf1SXGV8aKwR0WcKNq9dc=\");\n_c = SliderQuestion;\nexport default SliderQuestion;\nvar _c;\n$RefreshReg$(_c, \"SliderQuestion\");","map":{"version":3,"names":["React","useEffect","useState","BaseQuestion","jsxDEV","_jsxDEV","SliderQuestion","question","isError","value","onChange","language","_s","currentValue","setCurrentValue","undefined","min","handleSliderChange","e","newValue","parseInt","target","id","renderMarksAsColumns","markEntries","Object","entries","marks","range","maxMark","minMark","className","children","map","markValue","label","index","positionPercent","textAlignment","length","style","left","transform","fileName","_jsxFileName","lineNumber","columnNumber","markValues","keys","Number","Math","max","step","type","touchAction","_c","$RefreshReg$"],"sources":["/Users/pascalseeber/Desktop/survey-process-intelligence-main/src/components/questions/SliderQuestion.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport BaseQuestion from './BaseQuestion';\n\nconst SliderQuestion = ({ \n  question, \n  isError, \n  value, \n  onChange, \n  language \n}) => {\n  const [currentValue, setCurrentValue] = useState(value !== undefined ? value : question.min);\n  \n  useEffect(() => {\n    if (value !== undefined) {\n      setCurrentValue(value);\n    }\n  }, [value]);\n  \n  const handleSliderChange = (e) => {\n    const newValue = parseInt(e.target.value, 10);\n    setCurrentValue(newValue);\n    onChange(question.id, newValue);\n  };\n\n  const renderMarksAsColumns = () => {\n    const markEntries = Object.entries(question.marks);\n    const range = maxMark - minMark;\n\n    return (\n      <div className=\"relative w-full\">\n        {markEntries.map(([markValue, label], index) => {\n          const positionPercent = ((markValue - minMark) / range) * 100;\n          let textAlignment = \"text-center\";\n          if (index === 0) {\n            textAlignment = \"text-left\";\n          } else if (index === markEntries.length - 1) {\n            textAlignment = \"text-right\";\n          }\n\n          return (\n            <div\n              key={markValue}\n              className={`absolute ${textAlignment}`}\n              style={{ left: `${positionPercent}%`, transform: 'translateX(-50%)' }}\n            >\n              <span className=\"block text-xs text-gray-600 break-words\">{markValue}</span>\n              <span className=\"block text-xs text-gray-600 break-words\">{label}</span>\n            </div>\n          );\n        })}\n      </div>\n    );\n  };\n  \n  const markValues = Object.keys(question.marks).map(Number);\n  const minMark = Math.min(...markValues);\n  const maxMark = Math.max(...markValues);\n  const step = markValues.length > 1 ? markValues[1] - markValues[0] : 1;\n\n  return (\n    <BaseQuestion question={question} isError={isError} language={language}>\n      <div className=\"pt-1 pb-4 relative\">\n        <input\n          type=\"range\"\n          min={minMark}\n          max={maxMark}\n          step={step}\n          value={currentValue}\n          onChange={handleSliderChange}\n          className={`w-full h-6 ${isError ? 'accent-red-500' : 'accent-blue-600'}`}\n          style={{ touchAction: 'manipulation' }}\n          aria-valuemin={minMark}\n          aria-valuemax={maxMark}\n          aria-valuenow={currentValue}\n        />\n        \n        {renderMarksAsColumns()}\n      </div>\n    </BaseQuestion>\n  );\n};\n\nexport default SliderQuestion; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}