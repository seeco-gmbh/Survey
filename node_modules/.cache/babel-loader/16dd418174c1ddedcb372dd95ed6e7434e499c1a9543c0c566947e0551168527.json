{"ast":null,"code":"var _jsxFileName = \"/Users/pascalseeber/Desktop/survey-process-intelligence-main/src/components/questions/SliderQuestion.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport BaseQuestion from './BaseQuestion';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SliderQuestion = ({\n  question,\n  isError,\n  value,\n  onChange,\n  language\n}) => {\n  _s();\n  // Default to min value if no value is provided, or use the provided value\n  const [currentValue, setCurrentValue] = useState(value !== undefined ? value : question.min);\n\n  // Update local state when prop value changes\n  useEffect(() => {\n    if (value !== undefined) {\n      setCurrentValue(value);\n    }\n  }, [value]);\n\n  // Handle slider change\n  const handleSliderChange = e => {\n    const newValue = parseInt(e.target.value, 10);\n    setCurrentValue(newValue);\n    onChange(question.id, newValue);\n  };\n\n  // Render marks as a grid of columns\n  const renderMarksAsColumns = () => {\n    const markEntries = Object.entries(question.marks);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid mt-4\",\n      style: {\n        gridTemplateColumns: `repeat(${markEntries.length}, 1fr)`\n      },\n      children: markEntries.map(([markValue, label], index) => {\n        // Determine text alignment based on position\n        let textAlignment = \"text-center\"; // Default for middle columns\n        if (index === 0) {\n          textAlignment = \"text-left\"; // Left align for first column\n        } else if (index === markEntries.length - 1) {\n          textAlignment = \"text-right\";\n        }\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `px-1 ${textAlignment}`,\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"block text-xs text-gray-600 break-words\",\n            children: label\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 15\n          }, this)\n        }, markValue, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(BaseQuestion, {\n    question: question,\n    isError: isError,\n    language: language,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pt-1 pb-4 relative\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex justify-between m-2\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"text-lg font-medium\",\n          children: currentValue\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }, this), question.unit && /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"text-sm text-gray-500\",\n          children: question.unit\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"range\",\n        min: question.min,\n        max: question.max,\n        step: question.step || 1,\n        value: currentValue,\n        onChange: handleSliderChange,\n        className: `w-full h-6 ${isError ? 'accent-red-500' : 'accent-blue-600'}`,\n        style: {\n          touchAction: 'manipulation'\n        },\n        \"aria-valuemin\": question.min,\n        \"aria-valuemax\": question.max,\n        \"aria-valuenow\": currentValue\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex justify-between text-xs mt-1\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: [question.min, question.unit]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [question.max, question.unit]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), renderMarksAsColumns()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};\n_s(SliderQuestion, \"tVvdVRJf1SXGV8aKwR0WcKNq9dc=\");\n_c = SliderQuestion;\nexport default SliderQuestion;\nvar _c;\n$RefreshReg$(_c, \"SliderQuestion\");","map":{"version":3,"names":["React","useEffect","useState","BaseQuestion","jsxDEV","_jsxDEV","SliderQuestion","question","isError","value","onChange","language","_s","currentValue","setCurrentValue","undefined","min","handleSliderChange","e","newValue","parseInt","target","id","renderMarksAsColumns","markEntries","Object","entries","marks","className","style","gridTemplateColumns","length","children","map","markValue","label","index","textAlignment","fileName","_jsxFileName","lineNumber","columnNumber","unit","type","max","step","touchAction","_c","$RefreshReg$"],"sources":["/Users/pascalseeber/Desktop/survey-process-intelligence-main/src/components/questions/SliderQuestion.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport BaseQuestion from './BaseQuestion';\n\nconst SliderQuestion = ({ \n  question, \n  isError, \n  value, \n  onChange, \n  language \n}) => {\n  // Default to min value if no value is provided, or use the provided value\n  const [currentValue, setCurrentValue] = useState(value !== undefined ? value : question.min);\n  \n  // Update local state when prop value changes\n  useEffect(() => {\n    if (value !== undefined) {\n      setCurrentValue(value);\n    }\n  }, [value]);\n  \n  // Handle slider change\n  const handleSliderChange = (e) => {\n    const newValue = parseInt(e.target.value, 10);\n    setCurrentValue(newValue);\n    onChange(question.id, newValue);\n  };\n  \n  // Render marks as a grid of columns\n  const renderMarksAsColumns = () => {\n    const markEntries = Object.entries(question.marks);\n    \n    return (\n      <div className=\"grid mt-4\" style={{ gridTemplateColumns: `repeat(${markEntries.length}, 1fr)` }}>\n        {markEntries.map(([markValue, label], index) => {\n          // Determine text alignment based on position\n          let textAlignment = \"text-center\"; // Default for middle columns\n          if (index === 0) {\n            textAlignment = \"text-left\"; // Left align for first column\n          } else if (index === markEntries.length - 1) {\n            textAlignment = \"text-right\"; \n          }\n          \n          return (\n            <div key={markValue} className={`px-1 ${textAlignment}`}>\n              <span className=\"block text-xs text-gray-600 break-words\">{label}</span>\n            </div>\n          );\n        })}\n      </div>\n    );\n  };\n  \n  return (\n    <BaseQuestion question={question} isError={isError} language={language}>\n      <div className=\"pt-1 pb-4 relative\">\n        {/* Current value display */}\n        <div className=\"flex justify-between m-2\">\n          <span className=\"text-lg font-medium\">{currentValue}</span>\n          {question.unit && <span className=\"text-sm text-gray-500\">{question.unit}</span>}\n        </div>\n        \n        {/* Slider input */}\n        <input\n          type=\"range\"\n          min={question.min}\n          max={question.max}\n          step={question.step || 1}\n          value={currentValue}\n          onChange={handleSliderChange}\n          className={`w-full h-6 ${isError ? 'accent-red-500' : 'accent-blue-600'}`}\n          style={{ touchAction: 'manipulation' }}\n          aria-valuemin={question.min}\n          aria-valuemax={question.max}\n          aria-valuenow={currentValue}\n        />\n        \n        {/* Min/Max labels */}\n        <div className=\"flex justify-between text-xs mt-1\">\n          <span>{question.min}{question.unit}</span>\n          <span>{question.max}{question.unit}</span>\n        </div>\n        \n        {/* Marks as columns */}\n        {renderMarksAsColumns()}\n      </div>\n    </BaseQuestion>\n  );\n};\n\nexport default SliderQuestion; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}